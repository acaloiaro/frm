// Code generated by "enumer -type FieldLogicComparator -trimprefix FieldLogicComparator -transform=snake -json -text"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FieldLogicComparatorName = "equalcontainsnot"

var _FieldLogicComparatorIndex = [...]uint8{0, 5, 13, 16}

const _FieldLogicComparatorLowerName = "equalcontainsnot"

func (i FieldLogicComparator) String() string {
	if i < 0 || i >= FieldLogicComparator(len(_FieldLogicComparatorIndex)-1) {
		return fmt.Sprintf("FieldLogicComparator(%d)", i)
	}
	return _FieldLogicComparatorName[_FieldLogicComparatorIndex[i]:_FieldLogicComparatorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FieldLogicComparatorNoOp() {
	var x [1]struct{}
	_ = x[FieldLogicComparatorEqual-(0)]
	_ = x[FieldLogicComparatorContains-(1)]
	_ = x[FieldLogicComparatorNot-(2)]
}

var _FieldLogicComparatorValues = []FieldLogicComparator{FieldLogicComparatorEqual, FieldLogicComparatorContains, FieldLogicComparatorNot}

var _FieldLogicComparatorNameToValueMap = map[string]FieldLogicComparator{
	_FieldLogicComparatorName[0:5]:        FieldLogicComparatorEqual,
	_FieldLogicComparatorLowerName[0:5]:   FieldLogicComparatorEqual,
	_FieldLogicComparatorName[5:13]:       FieldLogicComparatorContains,
	_FieldLogicComparatorLowerName[5:13]:  FieldLogicComparatorContains,
	_FieldLogicComparatorName[13:16]:      FieldLogicComparatorNot,
	_FieldLogicComparatorLowerName[13:16]: FieldLogicComparatorNot,
}

var _FieldLogicComparatorNames = []string{
	_FieldLogicComparatorName[0:5],
	_FieldLogicComparatorName[5:13],
	_FieldLogicComparatorName[13:16],
}

// FieldLogicComparatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FieldLogicComparatorString(s string) (FieldLogicComparator, error) {
	if val, ok := _FieldLogicComparatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FieldLogicComparatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FieldLogicComparator values", s)
}

// FieldLogicComparatorValues returns all values of the enum
func FieldLogicComparatorValues() []FieldLogicComparator {
	return _FieldLogicComparatorValues
}

// FieldLogicComparatorStrings returns a slice of all String values of the enum
func FieldLogicComparatorStrings() []string {
	strs := make([]string, len(_FieldLogicComparatorNames))
	copy(strs, _FieldLogicComparatorNames)
	return strs
}

// IsAFieldLogicComparator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FieldLogicComparator) IsAFieldLogicComparator() bool {
	for _, v := range _FieldLogicComparatorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FieldLogicComparator
func (i FieldLogicComparator) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FieldLogicComparator
func (i *FieldLogicComparator) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FieldLogicComparator should be a string, got %s", data)
	}

	var err error
	*i, err = FieldLogicComparatorString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for FieldLogicComparator
func (i FieldLogicComparator) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FieldLogicComparator
func (i *FieldLogicComparator) UnmarshalText(text []byte) error {
	var err error
	*i, err = FieldLogicComparatorString(string(text))
	return err
}
