// Code generated by "enumer -type FormFieldDataType -trimprefix FormFieldDataType -transform=snake -json"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FormFieldDataTypeName = "textnumericrating"

var _FormFieldDataTypeIndex = [...]uint8{0, 4, 11, 17}

const _FormFieldDataTypeLowerName = "textnumericrating"

func (i FormFieldDataType) String() string {
	if i < 0 || i >= FormFieldDataType(len(_FormFieldDataTypeIndex)-1) {
		return fmt.Sprintf("FormFieldDataType(%d)", i)
	}
	return _FormFieldDataTypeName[_FormFieldDataTypeIndex[i]:_FormFieldDataTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FormFieldDataTypeNoOp() {
	var x [1]struct{}
	_ = x[FormFieldDataTypeText-(0)]
	_ = x[FormFieldDataTypeNumeric-(1)]
	_ = x[FormFieldDataTypeRating-(2)]
}

var _FormFieldDataTypeValues = []FormFieldDataType{FormFieldDataTypeText, FormFieldDataTypeNumeric, FormFieldDataTypeRating}

var _FormFieldDataTypeNameToValueMap = map[string]FormFieldDataType{
	_FormFieldDataTypeName[0:4]:        FormFieldDataTypeText,
	_FormFieldDataTypeLowerName[0:4]:   FormFieldDataTypeText,
	_FormFieldDataTypeName[4:11]:       FormFieldDataTypeNumeric,
	_FormFieldDataTypeLowerName[4:11]:  FormFieldDataTypeNumeric,
	_FormFieldDataTypeName[11:17]:      FormFieldDataTypeRating,
	_FormFieldDataTypeLowerName[11:17]: FormFieldDataTypeRating,
}

var _FormFieldDataTypeNames = []string{
	_FormFieldDataTypeName[0:4],
	_FormFieldDataTypeName[4:11],
	_FormFieldDataTypeName[11:17],
}

// FormFieldDataTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FormFieldDataTypeString(s string) (FormFieldDataType, error) {
	if val, ok := _FormFieldDataTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FormFieldDataTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FormFieldDataType values", s)
}

// FormFieldDataTypeValues returns all values of the enum
func FormFieldDataTypeValues() []FormFieldDataType {
	return _FormFieldDataTypeValues
}

// FormFieldDataTypeStrings returns a slice of all String values of the enum
func FormFieldDataTypeStrings() []string {
	strs := make([]string, len(_FormFieldDataTypeNames))
	copy(strs, _FormFieldDataTypeNames)
	return strs
}

// IsAFormFieldDataType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FormFieldDataType) IsAFormFieldDataType() bool {
	for _, v := range _FormFieldDataTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FormFieldDataType
func (i FormFieldDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FormFieldDataType
func (i *FormFieldDataType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FormFieldDataType should be a string, got %s", data)
	}

	var err error
	*i, err = FormFieldDataTypeString(s)
	return err
}
