// Code generated by "enumer -type FormFieldOptionOrder -trimprefix FormFieldOptionOrder -transform=snake -json -text"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FormFieldOptionOrderName = "option_order_naturaloption_order_random"

var _FormFieldOptionOrderIndex = [...]uint8{0, 20, 39}

const _FormFieldOptionOrderLowerName = "option_order_naturaloption_order_random"

func (i FormFieldOptionOrder) String() string {
	if i < 0 || i >= FormFieldOptionOrder(len(_FormFieldOptionOrderIndex)-1) {
		return fmt.Sprintf("FormFieldOptionOrder(%d)", i)
	}
	return _FormFieldOptionOrderName[_FormFieldOptionOrderIndex[i]:_FormFieldOptionOrderIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FormFieldOptionOrderNoOp() {
	var x [1]struct{}
	_ = x[OptionOrderNatural-(0)]
	_ = x[OptionOrderRandom-(1)]
}

var _FormFieldOptionOrderValues = []FormFieldOptionOrder{OptionOrderNatural, OptionOrderRandom}

var _FormFieldOptionOrderNameToValueMap = map[string]FormFieldOptionOrder{
	_FormFieldOptionOrderName[0:20]:       OptionOrderNatural,
	_FormFieldOptionOrderLowerName[0:20]:  OptionOrderNatural,
	_FormFieldOptionOrderName[20:39]:      OptionOrderRandom,
	_FormFieldOptionOrderLowerName[20:39]: OptionOrderRandom,
}

var _FormFieldOptionOrderNames = []string{
	_FormFieldOptionOrderName[0:20],
	_FormFieldOptionOrderName[20:39],
}

// FormFieldOptionOrderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FormFieldOptionOrderString(s string) (FormFieldOptionOrder, error) {
	if val, ok := _FormFieldOptionOrderNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FormFieldOptionOrderNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FormFieldOptionOrder values", s)
}

// FormFieldOptionOrderValues returns all values of the enum
func FormFieldOptionOrderValues() []FormFieldOptionOrder {
	return _FormFieldOptionOrderValues
}

// FormFieldOptionOrderStrings returns a slice of all String values of the enum
func FormFieldOptionOrderStrings() []string {
	strs := make([]string, len(_FormFieldOptionOrderNames))
	copy(strs, _FormFieldOptionOrderNames)
	return strs
}

// IsAFormFieldOptionOrder returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FormFieldOptionOrder) IsAFormFieldOptionOrder() bool {
	for _, v := range _FormFieldOptionOrderValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FormFieldOptionOrder
func (i FormFieldOptionOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FormFieldOptionOrder
func (i *FormFieldOptionOrder) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FormFieldOptionOrder should be a string, got %s", data)
	}

	var err error
	*i, err = FormFieldOptionOrderString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for FormFieldOptionOrder
func (i FormFieldOptionOrder) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FormFieldOptionOrder
func (i *FormFieldOptionOrder) UnmarshalText(text []byte) error {
	var err error
	*i, err = FormFieldOptionOrderString(string(text))
	return err
}
