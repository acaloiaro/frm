package collector

import (
	"context"
	"fmt"

	"github.com/acaloiaro/frm"
	"github.com/acaloiaro/frm/internal"
	"github.com/acaloiaro/frm/ui"
	"github.com/acaloiaro/frm/ui/fields"
	"html/template"
)

// Builder is the primary form builder UI, surrounded by the app chrome
templ Viewer(form frm.Form) {
	@ui.App(form.Name) {
		<div class="bg-sky-100 h-full">
			<section id="app-container" class="container mx-auto">
				@FormView(form, false)
			</section>
		</div>
	}
}

// FormPreview renders forms in a mock browser for previewing purposes
templ FormPreview(form frm.Form) {
	<section id="builder-main-middle-col" class="w-full h-full overflow-y-scroll overscroll-auto p-4 bg-gray-50 border-y-1 max-h-9/10">
		<div class="mockup-browser border-base-300 border overflow-visible">
			<div class="mockup-browser-toolbar">
				<div class="input border-base-300 border">https://your-form-domain.com/form</div>
			</div>
			<div class="flex border-base-300 bg-sky-100 border-t px-4 py-8">
				@FormView(form, true)
			</div>
		</div>
	</section>
}

// FormView is a view of Forms
templ FormView(form frm.Form, isPreview bool) {
	<div
		id="form-viewer"
		if isPreview {
			class="flex flex-col w-full mx-auto justify-top"
		} else {
			class="flex flex-col w-full md:w-2/3 lg:w-1/2 mx-auto justify-top py-6 lg:py-12 px-3 lg:px-0"
		}
		data-hx-swap-oob="true"
	>
		<div
			id="form-metadata"
			data-data={ ui.ViewerMetadata{Form: form}.JSON() }
		></div>
		<h1 class="rounded relative mb-8 font-black text-slate-700 text-2xl md:text-4xl lg:text-5xl">
			{ form.Name }
		</h1>
		<div id="form-input" hx-ext="response-targets">
			<div id="errors"></div>
			<form
				_="on field_change(field_id, value) formValueChanged(field_id, value)"
				class="flex flex-col gap-3"
				hx-post={ formCollectorUrl[string](ctx, form) }
				hx-target-400="#errors"
			>
				if sc := shortCode(ctx); sc != nil {
					<input name="short_code" type="hidden" value={ *sc }/>
				}
				for _, field := range fields.SortFields(form.Fields) {
					<div
						id={ fmt.Sprintf("field-container-%s", field.ID.String()) }
						if field.Hidden {
							class="flex flex-col bg-sky-200 rounded-xl p-6 hidden"
						} else {
							class="flex flex-col bg-sky-200 rounded-xl p-6"
						}
					>
						@fields.View(field)
					</div>
				}
				<div class="py-3"></div>
				<input
					type="submit"
					value="submit"
					class="btn bg-primary-500 hover:bg-primary-400 cursor-pointer justify-center uppercase"
					if isPreview {
						disabled
					}
				/>
			</form>
		</div>
		if f, err := frm.Instance(ctx); err == nil {
			<div id="collector_footer" class="pt-6 text-center">
				@toTemplComponent(f.CollectorFooter)
			</div>
		}
	</div>
}

func toTemplComponent(html string) templ.Component {
	t, err := template.New("templ_component").Parse(html)
	if err != nil {
		return templ.NopComponent
	}

	return templ.FromGoHTML(t, nil)
}

templ ThankYou() {
	@ui.App("Thank you") {
		<div class="bg-sky-100 h-screen">
			<section id="app-container" class="container mx-auto">
				<p class="text-4xl pt-9">Thank you!</p>
			</section>
		</div>
	}
}

// shortCode gets the short code from the request context, if present
func shortCode(ctx context.Context) (shortCode *string) {
	var ok bool
	shortCode, ok = ctx.Value(internal.ShortCodeContextKey).(*string)
	if !ok {
		return
	}
	return
}

// formCollectorUrl returns form collector URLs for the given form and additional path arguments
func formCollectorUrl[T string | templ.SafeURL](ctx context.Context, form frm.Form, path ...string) T {
	return T(frm.CollectorPathForm(ctx, form.ID, path...))
}

// externalStyles is an unused component that exists only to make some tailwind CSS classes available in user
// CSS. e.g. in the CollectorFooter
//
// Add to the below <p> tag's classes to expose more styles externally that are not yet available
templ externalStyles() {
	<p class="underline"></p>
}
